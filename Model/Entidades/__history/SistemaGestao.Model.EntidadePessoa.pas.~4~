unit SistemaGestao.Model.EntidadePessoa;

interface
         uses SistemaGestao.Model.EntidadeCidade,System.SysUtils,
         System.DateUtils, System.StrUtils,
         SistemaGestao.Model.EntidadeCondicaoPagamento;
       type
         TPessoa = class
         private
    Flogradouro: string;
    FnomePessoa: string;
    Ftipessoa: string;
    Femail: string;
    Fcomplemto: string;
    Fbairro: string;
    Fcodigo: Integer;
    Fnumero: Integer;
    FcpfouCnpj: string;
    FrgouInscricao: string;
    Fcidade: TCidade;
    Ftelefone: string;
    FdataNiverouFundacao: TDate;
    Fcelular: string;
    Fcep: string;
    procedure Setbairro(const Value: string);
    procedure Setcelular(const Value: string);
    procedure Setcidade(const Value: TCidade);
    procedure Setcodigo(const Value: Integer);
    procedure Setcomplemto(const Value: string);
    procedure SetcpfouCnpj(const Value: string);
    procedure SetdataNiverouFundacao(const Value: TDate);
    procedure Setemail(const Value: string);
    procedure Setlogradouro(const Value: string);
    procedure SetnomePessoa(const Value: string);
    procedure Setnumero(const Value: Integer);
    procedure SetrgouInscricao(const Value: string);
    procedure Settelefone(const Value: string);
    procedure Settipessoa(const Value: string);
    procedure Setcep(const Value: string);

         protected

         public
           constructor Create;
           destructor Destroy; override;


         published
            property codigo:Integer read Fcodigo write Setcodigo;
            property nomePessoa:string read FnomePessoa write SetnomePessoa;
            property dataNiverouFundacao:TDate read FdataNiverouFundacao write SetdataNiverouFundacao;
            property cpfouCnpj:string read FcpfouCnpj write SetcpfouCnpj;
            property rgouInscricao: string read FrgouInscricao write SetrgouInscricao;
            property logradouro:string read Flogradouro write Setlogradouro;
            property numero:Integer read Fnumero write Setnumero;
            property cep: string read Fcep write Setcep;
            property bairro:string read Fbairro write Setbairro;
            property complemto:string read Fcomplemto write Setcomplemto;
            property telefone:string read Ftelefone write Settelefone;
            property celular:string read Fcelular write Setcelular;
            property email:string read Femail write Setemail;
            property tipessoa:string read Ftipessoa write Settipessoa;
            property cidade: TCidade read Fcidade write Setcidade;
             function validacnpj(numCNPJ: string): Boolean;
         end;
implementation

{ TPessoa }

constructor TPessoa.Create;
begin
   numero:=0;
   Fcidade:=TCidade.Create;
end;

destructor TPessoa.Destroy;
begin
   Fcidade.Free;
  inherited;
end;

procedure TPessoa.Setbairro(const Value: string);
begin
  Fbairro := Value;
end;

procedure TPessoa.Setcelular(const Value: string);
begin
  Fcelular := Value;
end;

procedure TPessoa.Setcep(const Value: string);
begin
  Fcep := Value;
end;

procedure TPessoa.Setcidade(const Value: TCidade);
begin
  Fcidade := Value;
end;

procedure TPessoa.Setcodigo(const Value: Integer);
begin
  Fcodigo := Value;
end;

procedure TPessoa.Setcomplemto(const Value: string);
begin
  Fcomplemto := Value;
end;

procedure TPessoa.SetcpfouCnpj(const Value: string);
begin
  FcpfouCnpj := Value;
end;

procedure TPessoa.SetdataNiverouFundacao(const Value: TDate);
begin
  FdataNiverouFundacao := Value;
end;

procedure TPessoa.Setemail(const Value: string);
begin
  Femail := Value;
end;

procedure TPessoa.Setlogradouro(const Value: string);
begin
  Flogradouro := Value;
end;

procedure TPessoa.SetnomePessoa(const Value: string);
begin
  FnomePessoa := Value;
end;

procedure TPessoa.Setnumero(const Value: Integer);
begin
  Fnumero := Value;
end;

procedure TPessoa.SetrgouInscricao(const Value: string);
begin
  FrgouInscricao := Value;
end;

procedure TPessoa.Settelefone(const Value: string);
begin
  Ftelefone := Value;
end;

procedure TPessoa.Settipessoa(const Value: string);
begin
  Ftipessoa := Value;
end;

function TPessoa.validacnpj(numCNPJ: string): Boolean;
var

  cnpj: string;

  dg1, dg2: Integer;

  x, total: Integer;

  ret: Boolean;

begin

  ret := False;

  cnpj := '';

  // Analisa os formatos

  if Length(numCNPJ) = 18 then

    if (Copy(numCNPJ, 3, 1) + Copy(numCNPJ, 7, 1) + Copy(numCNPJ, 11, 1) +
      Copy(numCNPJ, 16, 1) = '../-') then

    begin

      cnpj := Copy(numCNPJ, 1, 2) + Copy(numCNPJ, 4, 3) + Copy(numCNPJ, 8, 3) +
        Copy(numCNPJ, 12, 4) + Copy(numCNPJ, 17, 2);

      ret := True;

    end;

  if Length(numCNPJ) = 14 then

  begin

    cnpj := numCNPJ;

    ret := True;

  end;

  // Verifica

  if ret then

  begin

    try

      // 1° digito

      total := 0;

      for x := 1 to 12 do

      begin

        if x < 5 then

          Inc(total, StrToInt(Copy(cnpj, x, 1)) * (6 - x))

        else

          Inc(total, StrToInt(Copy(cnpj, x, 1)) * (14 - x));

      end;

      dg1 := 11 - (total mod 11);

      if dg1 > 9 then

        dg1 := 0;

      // 2° digito

      total := 0;

      for x := 1 to 13 do

      begin

        if x < 6 then

          Inc(total, StrToInt(Copy(cnpj, x, 1)) * (7 - x))

        else

          Inc(total, StrToInt(Copy(cnpj, x, 1)) * (15 - x));

      end;

      dg2 := 11 - (total mod 11);

      if dg2 > 9 then

        dg2 := 0;

      // Validação final

      if (dg1 = StrToInt(Copy(cnpj, 13, 1))) and
        (dg2 = StrToInt(Copy(cnpj, 14, 1))) then

        ret := True

      else

        ret := False;

    except

      ret := False;

    end;

    // Inválidos

    case AnsiIndexStr(cnpj, ['00000000000000', '11111111111111',
      '22222222222222', '33333333333333', '44444444444444',

      '55555555555555', '66666666666666', '77777777777777', '88888888888888',
      '99999999999999']) of

      0 .. 9:
        ret := False;

    end;

  end;

  validacnpj := ret;

end;

end.
